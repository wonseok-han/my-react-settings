// https://github.com/jsx-eslint/eslint-plugin-react
// https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/eslint-plugin
// https://github.com/prettier/eslint-config-prettier
// https://github.com/prettier/eslint-plugin-prettier
// https://github.com/import-js/eslint-plugin-import
/**
 * Typescript React Eslint
 */
{
  "root": true,
  "env": {
    "browser": true,
    "es2021": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "plugin:prettier/recommended",
    "plugin:import/recommended",
    "plugin:import/typescript",
    "prettier"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
    },
    "ecmaVersion": "latest",
    "sourceType": "module",
    "project": "./tsconfig.json"
  },
  "plugins": [
    "react",
    "@typescript-eslint",
    "prettier",
    "@stylistic/js",
    "import"
  ],
  "rules": {
    "import/no-named-as-default": "off",
    "import/order": [
      "error",
      {
        "groups": [
          "type",
          "builtin",
          "external",
          "internal",
          [
            "parent",
            "sibling"
          ],
          "index"
        ],
        "alphabetize": {
          "order": "asc",
          "caseInsensitive": true
        },
        "newlines-between": "always"
      }
    ],
    "no-unused-vars": [
      "error",
      {
        "vars": "all",
        "args": "after-used",
        "argsIgnorePattern": "^_",
        "ignoreRestSiblings": false
      }
    ],
    "prettier/prettier": "error",
    "react/jsx-handler-names": [
      "error",
      {
        "eventHandlerPrefix": "on|handle",
        "eventHandlerPropPrefix": "on"
      }
    ],
    "react/jsx-sort-props": [
      "error",
      {
        "callbacksLast": true,
        "ignoreCase": true,
        "multiline": "last",
        "reservedFirst": [
          "key"
        ],
        "shorthandFirst": true
      }
    ],
    "react/react-in-jsx-scope": "off",
    "@stylistic/js/comma-dangle": [
      "error",
      "only-multiline"
    ],
    "@stylistic/js/object-curly-spacing": [
      "error",
      "always"
    ],
    "@stylistic/js/quotes": [
      "error",
      "single",
      {
        "allowTemplateLiterals": true
      }
    ],
    "@stylistic/js/space-before-blocks": [
      "error"
    ],
    "@stylistic/js/space-before-function-paren": [
      "error",
      {
        "anonymous": "always",
        "asyncArrow": "always",
        "named": "never"
      }
    ],
    "@typescript-eslint/array-type": [
      "error",
      {
        "default": "generic"
      }
    ],
    "@typescript-eslint/consistent-type-imports": "error",
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": [
          "variable"
        ],
        "types": [
          "boolean"
        ],
        "format": [
          "PascalCase"
        ],
        "prefix": [
          "is",
          "should",
          "has",
          "can",
          "did",
          "will"
        ]
      },
      {
        "selector": [
          "parameter"
        ],
        "leadingUnderscore": "allow",
        "format": [
          "camelCase",
          "snake_case"
        ]
      },
      {
        "selector": [
          "function",
          "variable"
        ],
        "format": [
          "camelCase",
          "PascalCase",
          "UPPER_CASE"
        ]
      },
      {
        "selector": [
          "variable"
        ],
        "modifiers": [
          "destructured"
        ],
        "format": null
      },
      {
        "selector": [
          "typeLike"
        ],
        "format": [
          "PascalCase"
        ],
        "custom": {
          "regex": "ImportMetaEnv|T|Props$",
          "match": true
        }
      },
      {
        "selector": [
          "class"
        ],
        "format": [
          "PascalCase"
        ]
      }
    ],
    "@typescript-eslint/no-explicit-any": "off",
    "@typescript-eslint/no-floating-promises": "off",
    "@typescript-eslint/no-misused-promises": [
      "error",
      {
        "checksVoidReturn": false
      }
    ],
    "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
    "@typescript-eslint/no-unsafe-argument": "off",
    "@typescript-eslint/no-unsafe-assignment": "off",
    "@typescript-eslint/no-unsafe-member-access": "off",
    "@typescript-eslint/no-unsafe-return": "off",
    "@typescript-eslint/no-unused-vars": [
      "error"
    ],
    "@typescript-eslint/no-useless-empty-export": "error",
    "@typescript-eslint/prefer-optional-chain": "error",
    "@typescript-eslint/type-annotation-spacing": [
      "error",
      {
        "before": false,
        "after": true,
        "overrides": {
          "arrow": {
            "before": true,
            "after": true
          }
        }
      }
    ]
  },
  "overrides": [
    {
      // enable the rule specifically for TypeScript files
      "files": [
        "*.js",
        "*.jsx",
        "*.ts",
        "*.tsx"
      ],
      "rules": {}
    }
  ],
  "settings": {
    "react": {
      "version": "detect"
    },
    "import/extensions": [
      ".ts",
      ".tsx"
    ],
    "import/parsers": {
      "@typescript-eslint/parser": [
        ".ts",
        ".tsx",
        ".d.ts"
      ]
    },
    "import/resolver": {
      "typescript": "./tsconfig.json",
      "node": {
        "paths": [
          "src"
        ],
        "extensions": [
          ".ts",
          ".tsx"
        ]
      }
    }
  },
  "ignorePatterns": [
    "node_modules/"
  ]
}
